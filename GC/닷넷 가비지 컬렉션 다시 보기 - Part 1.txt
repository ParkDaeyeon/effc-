http://www.simpleisbest.net/post/2011/04/01/Review-NET-Garbage-Collection.aspx

C/C++은 메모리 할당/해제 방식
C# 은 선형 메모리 할당, GC

1. 메모리 할당/해제 방식
C/C++ 런타임 라이브러리는 힙 상에서 사용 가능한 메모리 블록의 리스트를 유지하고, 메모리 할당 요청(new 혹은 malloc)이 있을 때마다 메모리 블록 리스트를 검색하여 요청된 크기의 메모리를 할당할 메모리 블록을 찾는다.  메모리 해제 요청(delete 혹은 free)이 있을 경우 할당된 메모리는 다시 사용 가능한 메모리 리스트에 삽입되게 된다.
- 사용 가능한 메모리 리스트 -> 자유 메모리 블럭 (free memory block)

2. 메모리 할당/해제 방식은 메모리 블록의 할당과 해제가 잦아지고, 할당하고자 하는 메모리 블록의 크기가 작을수록,
사용중인 메모리블록과 사용 가능한 메모리 블록이 작은 메모리 조각으로 쪼개어 지는 메모리 조각 현상이 두드러지게 된다.
- 할당 해제가 잦고, 할당할 메모리 크기가 작을수록 메모리 조각 현상이 두드러짐

3. 닷넷의 가비지 컬렉터(이하 GC)의 작동 방식
- 선형 메모리 할당과 사용하지 않는 메모리 블록을 찾아 제거하는 형식

4. 선형 메모리 할당
- 선형 메모리 할당이라 함은 C/C++와 같은 자유 메모리 블록 리스트를 사용하지 않고 다음 메모리 할당을 위한 포인터(NextObjPtr)만을 유지하는 것을 말한다. 따라서 객체에 대한 메모리 할당이 이루어지면 단순히 이 포인터 값을 할당할 크기만큼 증가 시키고 할당한 메모리를 0으로 초기화 하는 것에 지나지 않는다. 


5. GC메모리 할당방식의 장점은?
GC의 메모리 할당은 C/C++의 그것(메모리 할당/해제 방식)과 비교해 보았을 때 매우 빠르다
- 자유 메모리 블록 리스트 검사 필요 X
- 메모리 조각 현상 발생 X


6. GC는 어떻게 메모리 해제를 수행하는 것일까? 
GC는 특정 조건을 만족하는 상황이 되면 (힙의 사용 가능한 영역이 특정 수준 이하로 줄어든다든가 등등)
현재 수행중인 쓰레드들을 모두 중단시키고 GC 쓰레드를 활성화한다.
GC 쓰레드는 힙 상에서 사용중인 객체들의 그래프를 생성하고 사용 중인 객체의 위치를 재조정(relocate; compaction)함으로써 사용하지 않는 객체들을 힙 상에서 제거한다. 
GC 쓰레드와 다른 일반 쓰레드가 수행/중단 되는 상황은 어플리케이션이 어떤 GC 모드를 사용하고 있는가에 따라서 다르다. 


7. GC 쓰레드가 사용 중인 객체들을 판별하여 그래프 생성할 수 있는 이유?
GC는 객체의 참조 그래프(reference graph)를 만듦으로써 이를 해결한다. 
참조 그래프를 만들기 위해서는 루트 참조가 필요하다.
루트 참조에 해당하는 것
- 현재 각 쓰레드가 수행중인 메서드의 로컬변수(스택 변수)
- CPU 레지스터 변수가 가지고 있는 참조
- 현재 사용중인 각 타입(클래스)의 정적 필드(static field)
- 전역 변수


8. 객체 참조 그래프 작성
이 루트 참조를 출발점으로 해서 각 루트 참조가 참조하는 객체, 그리고 다시 그 객체가 참조하는 다른 객체들을 참조 그래프에 추가함으로써 현재 사용중인 객체의 참조 그래프를 작성하는 것이다. 


9. 가비지 컬렉션의 대상
객체 참조 그래프가 완성되면 이 그래프에 포함되지 않은 모든 객체는 현재 사용 중이 아닌 객체이며, 가비지 컬렉션의 대상이 되는 것이다. 실제로 GC는 이들 가비지 컬렉션의 대상이 되는 객체에 대해서 특별한 작업을 수행하지 않는다. 실제 작업은 참조 그래프상의 객체들을 힙 상에서 재배치 하고 메모리 할당 포인터를 감소시킴으로써 가비지 컬렉션을 수행하는 것이다. 이러한 과정을 메모리 컴팩션(compaction)이라고 한다.

10. 컴팩션은 얼마나 걸리나?
GC는 참조 그래프 상의 객체들의 위치를 재조정하고 메모리 할당 포인터를 조정하며, 그리고 각 참조 값들을 변경된 위치로 변화시키는 작업을 포함한다.
참조값을 변경하는 것이 복잡하고 오랜 시간이 소요되는 것처럼 느껴지지만 GC는 참조 그래프를 생성하면서 필요한 정보를 모두 보유하고 있으므로 생각보다 느리지 않게 작업을 수행한다. 이 작업은 매우 빨라서 200MHz의 팬티엄 PC에서 조차 채 0.001초가 소요되지 않았다고 한다. 

